#include<bits/stdc++.h>
using namespace std;
#define COMPUTER 1
#define HUMAN 2
#define SIDE 3
#define COMPUTERMOVE 'O'
#define HUMANMOVE 'X'

void displayBoard(char board[][SIDE]) {
    cout << "\t\t\t " << board[0][0] << " | " << board[0][1] << " | " << board[0][2] << "\n";
    cout << "\t\t\t-----------\n";
    cout << "\t\t\t " << board[1][0] << " | " << board[1][1] << " | " << board[1][2] << "\n";
    cout << "\t\t\t-----------\n";
    cout << "\t\t\t " << board[2][0] << " | " << board[2][1] << " | " << board[2][2] << "\n\n";
}

void displayInstructions() {
    cout << "\nChoose a cell numbered from 1 to 9 as below and play\n\n";
    cout << "\t\t\t 1 | 2 | 3 \n";
    cout << "\t\t\t-----------\n";
    cout << "\t\t\t 4 | 5 | 6 \n";
    cout << "\t\t\t-----------\n";
    cout << "\t\t\t 7 | 8 | 9 \n\n";
}

void resetBoard(char board[][SIDE]) {
    for (int i=0; i<SIDE; i++) {
        for (int j=0; j<SIDE; j++) {
            board[i][j] = '*';
        }
    }
}

void declareWinner(int player) {
    if (player == COMPUTER)
        cout << "COMPUTER has won\n";
    else
        cout << "HUMAN has won\n";
}

bool checkRows(char board[][SIDE]) {
    for (int i=0; i<SIDE; i++) {
        if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != '*')
            return true;
    }
    return false;
}

bool checkCols(char board[][SIDE]) {
    for (int i=0; i<SIDE; i++) {
        if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != '*')
            return true;
    }
    return false;
}

bool checkDiags(char board[][SIDE]) {
    if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != '*')
        return true;
    if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] != '*')
        return true;
    return false;
}

bool isGameOver(char board[][SIDE]) {
    return (checkRows(board) || checkCols(board) || checkDiags(board));
}

int minimax(char board[][SIDE], int depth, bool isAI) {
    int score = 0;
    int bestScore = 0;

    if (isGameOver(board)) {
        return isAI ? -10 : 10;
    } else {
        if (depth < 9) {
            if (isAI) {
                bestScore = -999;
                for (int i=0; i<SIDE; i++) {
                    for (int j=0; j<SIDE; j++) {
                        if (board[i][j] == '*') {
                            board[i][j] = COMPUTERMOVE;
                            score = minimax(board, depth + 1, false);
                            board[i][j] = '*';
                            if (score > bestScore) {
                                bestScore = score;
                            }
                        }
                    }
                }
                return bestScore;
            } else {
                bestScore = 999;
                for (int i=0; i<SIDE; i++) {
                    for (int j=0; j<SIDE; j++) {
                        if (board[i][j] == '*') {
                            board[i][j] = HUMANMOVE;
                            score = minimax(board, depth + 1, true);
                            board[i][j] = '*';
                            if (score < bestScore) {
                                bestScore = score;
                            }
                        }
                    }
                }
                return bestScore;
            }
        } else {
            return 0;
        }
    }
}

int getBestMove(char board[][SIDE], int moveIndex) {
    int x = -1, y = -1;
    int score = 0, bestScore = -999;
    for (int i=0; i<SIDE; i++) {
        for (int j=0; j<SIDE; j++) {
            if (board[i][j] == '*') {
                board[i][j] = COMPUTERMOVE;
                score = minimax(board, moveIndex + 1, false);
                board[i][j] = '*';
                if (score > bestScore) {
                    bestScore = score;
                    x = i;
                    y = j;
                }
            }
        }
    }
    return x * 3 + y;
}

void playGame(int player) {
    char board[SIDE][SIDE];
    int moveIndex = 0, x = 0, y = 0;
    resetBoard(board);
    displayInstructions();
    
    while (!isGameOver(board) && moveIndex != SIDE * SIDE) {
        int n;
        if (player == COMPUTER) {
            n = getBestMove(board, moveIndex);
            x = n / SIDE;
            y = n % SIDE;
            board[x][y] = COMPUTERMOVE;
            cout << "COMPUTER placed " << COMPUTERMOVE << " in cell " << n+1 << "\n\n";
            displayBoard(board);
            moveIndex++;
            player = HUMAN;
        } else if (player == HUMAN) {
            cout << "Available positions: ";
            for (int i=0; i<SIDE; i++) {
                for (int j=0; j<SIDE; j++) {
                    if (board[i][j] == '*') {
                        cout << (i * 3 + j) + 1 << " ";
                    }
                }
            }
            cout << "\n\nEnter position: ";
            cin >> n;
            n--;
            x = n / SIDE;
            y = n % SIDE;
            if (board[x][y] == '*' && n >= 0 && n < 9) {
                board[x][y] = HUMANMOVE;
                cout << "\nHUMAN placed " << HUMANMOVE << " in cell " << n + 1 << "\n\n";
                displayBoard(board);
                moveIndex++;
                player = COMPUTER;
            } else {
                cout << "\nInvalid position, try again\n";
            }
        }
    }

    if (!isGameOver(board) && moveIndex == SIDE * SIDE) {
        cout << "It's a draw\n";
    } else {
        player = (player == COMPUTER) ? HUMAN : COMPUTER;
        declareWinner(player);
    }
}

int main() {
    cout << "\n-------------------------------------------------------------------\n\n";
    cout << "\t\t\t Tic-Tac-Toe\n";
    cout << "\n-------------------------------------------------------------------\n\n";

    char cont = 'y';
    do {
        char choice;
        cout << "Do you want to start first? (y/n): ";
        cin >> choice;

        if (choice == 'n') {
            playGame(COMPUTER);
        } else if (choice == 'y') {
            playGame(HUMAN);
        } else {
            cout << "Invalid choice\n";
        }

        cout << "\nDo you want to quit (y/n): ";
        cin >> cont;
    } while (cont == 'n');

    return 0;
}
